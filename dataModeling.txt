
// Everything in English
// For card game terms, see: https://en.wikipedia.org/wiki/Glossary_of_card_game_terms
// => One Game consists of several Deals where Players use all their cards during successive Rounds 



// IMHO better to use just int number to reference cards in all messages
// and have a "cards description" hash with the complementary info(malus,...) when needed
// reason 1: information about cards is not changing during game
// reason 2: we cannot accept malus info from client because of tampering risk
// reason 3: simpler action data

gameDescription: {
  settings:{
    endIfMalusIs: 77,
    endIfNbDealsIs: 8,
    cardsPerDeal: 10,
    timePerRound: 45,
    timeToChooseStack: 30
  }
  cards: {
    59: {
      malus: 1
      icon: "..."  // optionally for custom design
    }
    91: {
      malus: 1
    },
    102 : {
      malus: 1
    }
  },
  players: {
    "Hugo":{
      avatarIcon: "/hugo.png"
    },
    "Vincent":{
      avatarIcon: "/vincent.png",
    }
  }
}

gameState: {
  players:[
    {
      name: "Hugo",
      malusScore: 22,
      cards:[71,100],
      playedCard: 9     // null except for END_TURN action
    },
    {
      name: "Vincent",
      malusScore: 37,
      cards:[34,79],
      playedCard: 3     // null except for END_TURN action
    }
  ],
  playStacks:[
    [8],
    [59],
    [36,48],
    [91,102]
  ]
}

gameActions:[
  ... // only server actions(see below), can be used for replay
]


// Actions initiated by SERVER (trusted)
// Should be able to replay a game using only server actions
// Not described here, but every server action should be linked to:
// * a game id
// * a timestamp format ISO 8601: "2015-10-15T18:25:43.511Z"
serverActions: [
  {
    name: "CREATE_GAME",
    settings: ...  // gameDescription.settings object as described above
  },
  {
    name: "HAS_JOINED",  // just so that players know who has joined the game already
    player: "Hugo"       // players can join until START_GAME
  },
  {
    name: "IS_READY_FOR_GAME",  // just so that players know who is ready/not ready
    player: "Hugo"
  },
  {
    name: "START_GAME",  // start when all players sent READY_FOR_GAME
    gameDescription: ... // gameDescription object as described above
  },
  {
    name: "START_DEAL",   // start when all players sent READY_FOR_DEAL
    gameState: ... // gameState object as described above
  },
  {
    name: "START_TURN",   // start automatically
    gameState: ... // gameState object as described above
  },
  {
    name: "IS_READY_FOR_PLAY",  // just so that players know who has choosen/not choosen a card already
    player: "Hugo"
  },
  {
    name: "END_TURN",
    gameState: ... // gameState object as described above
  },
  {
    name: "END_GAME",
    gameState: ... // gameState object as described above
  }
]


// Actions initiated by CLIENTS (not trusted)
// Should be processed by the server to generate game actions, then discarded
clientActions: [
  {
    name: "JOIN_GAME",  // server returns a secure hash identifying player and game for future communication
    player: {
      name: "Vincent",  // Use as player ID, refuse if same name already joined
      avatarIcon: "/vincent.png"
    },
    password: "..."  // optionally for password protected games
  },
  {
    name: "READY_FOR_GAME",  // Server wait for all players ACK before starting the game
    secureHash: "cf23df2207d99a74fbe169e3eba035e633b65d94"
  },
  {
    name: "READY_FOR_DEAL",  // Server wait for all players ACK before starting a new deal
    secureHash: "cf23df2207d99a74fbe169e3eba035e633b65d94"
  },
  {
    name: "READY_FOR_PLAY",  // Client can send several READY_FOR_PLAY event if user change is mind, up to the END_TURN event
    card: 102,
    message: "Por favor!",
    secureHash: "cf23df2207d99a74fbe169e3eba035e633b65d94"
  },
  {
    name: "CHOOSE_STACK",
    stack: 2,
    secureHash: "cf23df2207d99a74fbe169e3eba035e633b65d94"
  }
}